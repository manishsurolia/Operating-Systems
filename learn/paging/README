If a RAM is 32-bit addressable, it has total byte addresses as below.

    0x00000000 -   0xFFFFFFFF

    (0)        -   4294967295

Means, this RAM has 4294967296 bytes available, in total.

Note : A memory address always points to a single byte only.
       A 'word' is just a group of bytes. 2, 4, 8..., depending upon the data
       bus size of the CPU.

Paging divides an executable program into equal-sized pages and physical
memory(RAM) into the same fixed size frames. So, you are typically fixing equal
size blocks called 'pages' into equal block shaped spaces called 'page frame'!!!
Try to visualize this.

So, in paging, the whole RAM (whether its 32-bit addressable, or
64-bit addressable), is divided into frames of same size.

This frame of same size is called a 'page frame' where some program page will
come and sit.

Generally (in many OS), the size of each 'PAGE' and 'PAGE FRAME' is 4096 bytes
(4 KB).

So, if PAGE size is 4096 bytes, how many PAGES can be present in a 32-bit
addressable RAM?

    Max number of bytes available in a 32-bit addressable RAM : 4294967296 bytes
    PAGE size                                                 : 4096 bytes

        Total page frames = 4294967296 / 4096 = 1048576

Hence, we can have total 1048576 page frames in a 32-bit addressable RAM when
the size of each page frame is 4096 bytes.

We can represent this RAM as below:

            ----------------------- <--- 0x00000000
            |                     |
            |    PAGE FRAME 1     |
            | (size : 4096 bytes  |
            |                     |
            ----------------------- <--- 0x00001000
            |                     |
            |   PAGE FRAME 2      |
            | (size : 4096 bytes  |
            |                     |
            ----------------------- <--- 0x00002000
            |                     |
            |   PAGE FRAME 3      |
            | (size : 4096 bytes  |
            |                     |
            ----------------------- <--- 0x00003000
            |                     |
            |   PAGE FRAME 4      |
            | (size : 4096 bytes  |
            |                     |
            ----------------------- <--- 0x00004000
            |                     |
            |   PAGE FRAME 5      |
            | (size : 4096 bytes  |
            |                     |
            ----------------------- <--- 0x00005000
            |                     |
            |   PAGE FRAME 6      |
            | (size : 4096 bytes  |
            |                     |
            ----------------------- <--- 0x00006000
            |                     |
            |        |            |
            |        |            |
            |        |            |
            |        |            |
            |        |            |
            |        |            |
            |        |            |
            |        |            |
            |        |            |
            |        |            |
            |        |            |
            |        |            |
            |        |            |
            |       \|/           |
            |                     |
            |                     |
            ----------------------- <---- 0xFFFFEFFF
            |                     |
            | PAGE FRAME 1048576  |
            | (size : 4096 bytes  |
            |                     |
            ----------------------- <---- 0xFFFFFFFF

             32-bit addressable RAM
             ----------------------

When OS need to load a program into RAM, it first divides this whole program
into fixed size(4096 bytes) pages, and try to find whether RAM has sufficient
page frames available or not. Let's assume that kernel also maintain a free-list
similar to 'malloc' to get free page frames from RAM.

Let's take an example to understand this.
Suppose we have an executable(with all data, text..etc), which needs total of
17000 bytes in RAM, which includes all its things, like data, text, stack,
heap..etc.

So, this program will take total of 5 page frames of RAM to be loaded
completely.

4096 * 5 = 20480 bytes

Note: Four page frames from RAM will not be sufficient as that will have only
16384 bytes space.

Compiler/linker has written all the instructions in this program assuming that
this program starts at address 0. So, first scheduler will make a virtual
address space of this program as per the program.

         ____________________ <-- 0x00000000
         |                  |        /|\
         |                  |         |
         |                  |         |
         |                  |         |
         |                  |         |
         |                  |         |
         |                  |         |
         |                  |         | 17000 bytes
         |                  |         |
         |                  |         |
         |                  |         |
         |                  |         |
         |                  |         |
         |                  |         |
         |                  |         |
         |                  |         |
         |                  |         |
         |                  |        \|/
         -------------------- <-- 0x00004268

This whole program is converted to pages as below:


         ____________________ <-- 0x00000000
         |                  |        /|\
         |     PAGE 1       |         |
         |                  |         |
         --------------------         |
         |                  |         |
         |     PAGE 2       |         |
         |                  |         | 17000 bytes
         --------------------         |
         |                  |         |
         |     PAGE 3       |         |
         |                  |         |
         --------------------         |
         |                  |         |
         |     PAGE 4       |         |
         |                  |         |
         --------------------        \|/
         |                  | <-- 0x00004268
         |     PAGE 5       |
         |                  |
         -------------------- <-- 0x00005000

Now, scheduler finds page frames in RAM and fits all the above pages in the
found page frames in RAM as below:


          __________________   <--- 0x00000000
         |                  |
         | Operating system |
         |                  |
         --------------------
         |                  |
         |     (Unused)     |
         |                  |
         --------------------
         |                  |
         |     PAGE 3       |
         |                  |
         --------------------
         |                  |
         |     PAGE 4       |
         |                  |
         --------------------
         |                  |
         |     (Unused)     |
         |                  |
         --------------------
         |                  |
         |     PAGE 2       |
         |                  |
         --------------------
         |                  |
         |     Unused       |
         |                  |
         --------------------
         |                  |
         |     PAGE 5       |
         |                  |
         --------------------
         |                  |
         |     PAGE 1       |
         |                  |
         --------------------
         |                  |
         |        |         |
         |        |         |
         |        |         |
         |       \|/        |
         ------------------- <-- 0xFFFFFFFF


Kernel need to maintain a kind of free-list to find appropriate physical frame
for a virtual page for this reason.

All the data written in this program's read/write/execute memory is based on the
original addresses given to them by linker, and not based on the place where
this program will be loaded in RAM. Hence, Runtime conversion of an address from
virtual memory to physical memory is required.

Means, when a program executes an instruction which uses some program address,
the CPU should be able to convert this address to the real address in the
RAM where the page has actually been loaded.

Hence, when the program pages loads in RAM's page frames, we need to note down
the addresses of these page frames.

This noting down of all the real page frame numbers corresponding to each page,
is called 'page table'.

A page table looks like below:

  1 -----------------------------------
    | --------|---------------------  |
    | | 12    |  20 bits for a page|  |
    | |bits   |  frame number in   |  |
    | | for   |  RAM, where the    |  |
    | |flags  |  program's first   |  |
    | |       |  page is loaded    |  |
    | -----------------------------   |
    | <------32 bits-------------->   |
  2 -----------------------------------
    | --------|---------------------  |
    | | 12    |  20 bits for a page|  |
    | |bits   |  frame number in   |  |
    | | for   |  RAM, where the    |  |
    | |flags  |  program's second  |  |
    | |       |  page is loaded    |  |
    | -----------------------------   |
    | <------32 bits-------------->   |
  3 -----------------------------------
    | --------|---------------------  |
    | | 12    |  20 bits for a page|  |
    | |bits   |  frame number in   |  |
    | | for   |  RAM, where the    |  |
    | |flags  |  program's third   |  |
    | |       |  page is loaded    |  |
    | -----------------------------   |
    | <------32 bits-------------->   |
    ----------------------------------
                 |
                 |
                 |
                 |
                \|/
    ----------------------------------- (1048576)
    | --------|---------------------  |
    | | 12    |  20 bits for a page|  |
    | |bits   |  frame number in   |  |
    | | for   |  RAM, where the    |  |
    | |flags  |  program's Nth     |  |
    | |       |  page is loaded    |  |
    | -----------------------------   |
    | <------32 bits-------------->   |
    -----------------------------------


This table gives the frame number of each page in RAM. Like, which RAM page
frame has the first page of this process, which page frame has the second page
of the process...etc. Once we find the frame number, we can easily calculate
the actual address of the frame, when a program executes and tries to
read/write/execute data on a memory.

Note here that a separate page table is required for each process to find where
this process pages are present in RAM.

Also, note that each entry in this page table is called 'page table entry'.

Question : Are 20 bits enough to write any page frame number in a 32-bit
---------  addressable RAM?

Answer : Yes, we have total of 1048576 frames in a 32-bit addressable RAM when
each page size is 4096. So, 20 bits are sufficient to write any page frame
number (PFN) in whole RAM.

Along with these 20 bits there are 12 extra bits to store permission bits.
Hence, the total size of a page table entry is 20+12 = 32 bits (4 bytes).

Question : How big can be a page table?
--------

Answer : If a program needs only 5 pages to be stored in RAM, it needs 5 page
frames, so 5 page table entries are sufficient. But somehow each process has
placeholder to contain all (2^20 = 1048576) page frame numbers.

Hence, the size of a page table for each process is :
 = 2^20 entires  * 4 bytes
 = 1048576 * 4 = 4194304 (4 MB)

Size of a page table for each process is 4 MB.

==============================================
Let's see a real example on a 64-bit machine:
==============================================

- My computer has 64-bit addressable RAM.
[ ] uname -mpi
x86_64 x86_64 x86_64

- The whole RAM is divided into page frames of 4096 bytes.
[ ] getconf PAGE_SIZE
4096

- 'gcc' compiler tool chain in my computer, compiles C code for this 64-bit
addressable RAM.

- Total byte addresses I have in my 64-bit addressable RAM is :
    0     -       18446744073709551616
    0x0   -       0xFFFFFFFFFFFFFFFF

- So, the total number of page frames are equal to:

        18446744073709551616 / 4096 = 4503599627370495

        2^64                 / 2^12 = 2^52

- This reflects that first 52 bits of any address created by the compiler tool
chain (logical address), will be used to find the find the virtual page number.

- I have this C code to add two numbers.

C code:
-------

[ ] vim test.c

#include <stdio.h>


int add(int a, int b)
{
    return (a + b);
}

int main(int argc, char **argv)
{
    int x = 10;
    int y = 20;
    int z;

    z = add(x,y);
    printf("Result : %d\n",z);
    return 0;
}

Compile:
--------

[ ] gcc test.c

Snippet of Assembly ():
-----------------------

[ ] objdump -d a.out

0000000000001149 <add>:
    1149:	f3 0f 1e fa          	endbr64
    114d:	55                   	push   %rbp
    114e:	48 89 e5             	mov    %rsp,%rbp
    1151:	89 7d fc             	mov    %edi,-0x4(%rbp)
    1154:	89 75 f8             	mov    %esi,-0x8(%rbp)
    1157:	8b 55 fc             	mov    -0x4(%rbp),%edx
    115a:	8b 45 f8             	mov    -0x8(%rbp),%eax
    115d:	01 d0                	add    %edx,%eax
    115f:	5d                   	pop    %rbp
    1160:	c3                   	retq

0000000000001161 <main>:
    1161:	f3 0f 1e fa          	endbr64
    1165:	55                   	push   %rbp
    1166:	48 89 e5             	mov    %rsp,%rbp
    1169:	48 83 ec 20          	sub    $0x20,%rsp
    116d:	89 7d ec             	mov    %edi,-0x14(%rbp)
    1170:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    1174:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%rbp)
    117b:	c7 45 f8 14 00 00 00 	movl   $0x14,-0x8(%rbp)
    1182:	8b 55 f8             	mov    -0x8(%rbp),%edx
    1185:	8b 45 f4             	mov    -0xc(%rbp),%eax
    1188:	89 d6                	mov    %edx,%esi
    118a:	89 c7                	mov    %eax,%edi
    118c:	e8 b8 ff ff ff       	callq  1149 <add>        <--- Jumping to 0x0000000000001149 (add function).
    1191:	89 45 fc             	mov    %eax,-0x4(%rbp)
    1194:	8b 45 fc             	mov    -0x4(%rbp),%eax
    1197:	89 c6                	mov    %eax,%esi
    1199:	48 8d 3d 64 0e 00 00 	lea    0xe64(%rip),%rdi
    11a0:	b8 00 00 00 00       	mov    $0x0,%eax
    11a5:	e8 a6 fe ff ff       	callq  1050 <printf@plt>
    11aa:	b8 00 00 00 00       	mov    $0x0,%eax
    11af:	c9                   	leaveq
    11b0:	c3                   	retq
    11b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    11b8:	00 00 00
    11bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

- This whole conversion of logical address to physical RAM address happens in
MMU.

- When processor sees a memory address to be accessed while executing
instructions, it asks MMU to convert this logical address to physical address
using this page table. When a program executes, MMU has its page table address
with it. All processes page tables are maintained in RAM itself.

Example : "callq  1149 <add>" (from above code).

- Here, lets decode, where the function 'add' is stored in RAM.

- Logical address for this function is 0x0000000000001149.

Below is the binary structure for this.

    00000000 00000000 00000000 00000000 00000000 00000000 0001 0001 0100 1001

First 52 bits will be used to find the virtual page number (as mentioned above).

    00000000 00000000 00000000 00000000 00000000 00000000 0001 0001 0100 1001
    <-------------------------------------------------------->

So, this address is in virtual page number 1.
and offset is (remaining) : 0001 0100 1001

Now, look for this process page table, what is the physical page frame number
for this virtual page number 1. The second entry in this below page table will
give us the physical page frame number. We just need to replace it in the above
address at first 52 bits.

That's all, we get the correct physical address for this logical address.
Now, processor can use this address to do its operation related to the
instruction.


      0 ------------------------------------
        | 52 bit physical page frame number|
      1 ------------------------------------
        | 52 bit physical page frame number|
      2 ------------------------------------
        | 52 bit physical page frame number|
      3 -----------------------------------
        |                                  |
        |                                  |
       \/                                 \/


This page table is filled with the physical page numbers, when a program is
loaded in memory (program scheduling time).

================================
Do page tables make system slow?
================================

Yes, because for each memory access, processor needs to fetch the data from one
of its Page table entry(which exists in RAM) to get the physical page frame
number.

Simply putting the whole thing as below,

We are just replacing the virtual page number of a virtual address with the
physical frame number using the page table of the process.

    For example, from our last example, 0x0000000000001149 is represented as,

    00000000 00000000 00000000 00000000 00000000 00000000 0001 0001 0100 1001
    <-------------------------------------------------------->

Replace these first 52 bits(virtual page number) with the physical frame number.

Let's assume that a single 'page-table base register' contains the physical
address of the starting location of the page table.

Now, to find the location of the desired page table entry, the hardware(MMU)
needs to do below:

    VPN = (VirtualAddress & VPN_MASK) >> SHIFT;
    PTEAddr = PageTableBaseRegister + (VPN * sizeof(PTE));

Here, VPN_MASK represents the mask for the number of bits used for finding page
number. The purpose of this VPN is that, we just want to fetch the page number
used in the address. so that we can look in the page table to find the
corresponding physical frame number.

For example, in a 64-bit machine(as last example), we have the number of bits
used for page number is 'first 52 bits'.

so the VPN_MASK here is,

    #define VPN_MASK 0xFFFFFFFFFFFFF000

and we just need to shift with 3 bits to get the page number. Hence,

    #define SHIFT 3

Now, lets apply the first statement on the last example to get the virtual page
number.

    VPN = (0x0000000000001149 & VPN_MASK) >> SHIFT
        = 1

So, the virtual page number is 1 for this address. we need to look for the
physical frame number for this first virtual page in the page table.

Now, lets see which RAM address has the physical frame number for this VPN.

    PTEAddr = PageTableBaseRegister + (VPN * sizeof(PTE));

This 'PTEAddr' of RAM holds the physical frame number for this VPN. Just get the
value from this address. This will be our physical frame number.

Note : Below fetching the phycial page frame number from this 'PTEAddr' is the
costliest operation among all other things we are doing here because processor
need to fetch data from external entity (RAM).

    PFN = *PTEAddr

Means, for each virtual address resolution, we need to do an extra fetch from
RAM, which makes the system SLOW.

Now, once you get the physcial page number, its quite easy to the physical
address using this. Below is the formula.

    offset = VirtualAddress & OFFSET_MASK;
    PhysicalAddr = (PFN << SHIFT) | offset;


Here, obviously, OFFSET_MASK is the remaining bits.

In our example, its 64 - 52 = 12 bits.

Hence,

#define OFFSET_MASK 0xFFF

So, get the offset, left shift PFN with 3 bits, and just do OR with the offset
and you will get the physical address.

Summary:
-------

Paging is a solution to the challenge of virtualizing memory. It has many
advantages over previous approaches (such as segmentation).

    - First, it does not lead to external fragmentation, as paging (by design)
divides memory into fixed-sized units.
    - Second, it is quite flexible, enabling the sparse use of virtual address
spaces.

However, the above method of paging will lead to a slower machine (with an
extra memory access to access each virtual address) as well as memory waste
(with memory filled with page tables instead of useful application data).

To make the above approach faster, we have Translation Lookaside Buffer (TLB).
TLB is a hardware support, which works together with paging to make address
translations faster.
Please check TLB section to know more about TLB and its work.

References:
----------

(1) https://pages.cs.wisc.edu/~remzi/OSTEP/vm-paging.pdf

(2) https://stackoverflow.com/questions/2724449/difference-between-word-addressable-and-byte-addressable#:~:text=In%20reality%2C%20memory%20is%20only,bus%20size%20of%20the%20CPU.

(3) https://stackoverflow.com/questions/32744662/how-is-there-internal-fragmentation-in-paging-and-no-external-fragmentation#:~:text=Answer%20is%20no.,possible%20but%20not%20external%20fragmentation.





