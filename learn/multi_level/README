The problem statement is, "How to reduce the size of linear page table"?

The hybrid appraoch (please refer hybrid section for more details) has its own
issues of external fragmentation. Hence, we are looking for a better approach.

Multi-level page table basically chop up the whole linear page table into
multiple pages and keep them at different place, and keep them only if they are
required.

To Understand the concept of multi-level page table more clearly, lets take an
example here.

(1) Lets assume that we have a small 14-bit addressable RAM and we keep
PAGE_ASIZE as 64 bytes.

Hence, total addresses we have :  0x0   -   2^14
                                  0x0   -   16384 bytes

Our PAGE_SIZE is : 64 bytes. (2^6)

So, total number of pages are : ((2^14) / (2^6)) = 2^8 = 256 pages.

Note that, a PFN can be addresses with just 8 bits (from 0 to 255).

Hence, the RAM looks like below,

PFN is 'Page Frame Number'.

                    _____________________
                    |                   |
                    |      PFN 0        |
                    |                   |
                    ---------------------
                    |                   |
                    |      PFN 1        |
                    |                   |
                    ---------------------
                    |                   |
                    |      PFN 2        |
                    |                   |
                    ---------------------
                    |                   |
                    |                   |
                    |                   |
                    |                   |
                    |                   |
                    |                   |
                    |                   |
                    |                   |
                    |                   |
                    ---------------------
                    |                   |
                    |      PFN 255      |
                    |                   |
                    ---------------------

(2) Linear page table : Here, the linear page table(per process) needs to have
---------------------   sufficient placeholders to to keep all the PFN's, as a
                        process can dynamically expand to the max of the RAM.

We need 8 bits to have a PFN in a 'Page Table entry', and assume that we need
extra 24 bits for PFN(looks un-realistic, but just assume to understand it)
meta-data. Hence, our page table looks like below:

PTE is "Page Table Entry".


                    |<------- 32-bits ---------------->|
                    |<-8 bits-><----- 24 bits -------->|

                    ___________________________________
                    |         |                        |
         PTE 0      |         |                        |
                    |         |                        |
                    ------------------------------------
                    |         |                        |
         PTE 1      |         |                        |
                    |         |                        |
                    ------------------------------------
                    |         |                        |
         PTE 2      |         |                        |
                    |         |                        |
                    ------------------------------------
                    |         |        |               |
                    |         |        |               |
                    |         |        |               |
                    |         |        |               |
                    |         |        |               |
                    |         |        |               |
                    |         |       \|/              |
                    |         |                        |
                    |         |                        |
                    ------------------------------------
                    |         |                        |
         PTE 255    |         |                        |
                    |         |                        |
                    ------------------------------------

Hence, the total size of our page table (per process) is :

                        = 4 bytes * 256 = 1024 bytes (1 KB)

Here, even if our process is a small process and utilize only 4 pages, the page
table for that process will waste a lot of memory.

(3) Lets assume that we compile a program to load in this device. Compiler
generated a virtual address space for the program as below (Remember that its a
virtual address space, and not yet loaded in the RAM). This starts at address
0x0.

                   |<----- 64 bytes --------------->|
                   __________________________________
                   |                                |
   Virtual PAGE 0  |            Code                |
                   |                                |
                   ----------------------------------
                   |                                |
   Virtual PAGE 1  |            Code                |
                   |                                |
                   ----------------------------------
                   |                                |
   Virtual PAGE 2  |            Free                |
                   |                                |
                   ----------------------------------
                   |                                |
   Virtual PAGE 3  |            Heap                |
                   |                                |
                   ----------------------------------
                   |                                |
   Virtual PAGE 4  |            Heap                |
                   |                                |
                   ----------------------------------
                   |                                |
                   |                                |
                   |                                |
                   |    ----- all free ----         |
                   |                                |
                   |                                |
                   |                                |
                   ----------------------------------
                   |                                |
  Virtual PAGE 254 |            Stack               |
                   |                                |
                   ----------------------------------
                   |                                |
  Virtual PAGE 255 |            Stack               |
                   |                                |
                   ----------------------------------

Here, we can see that this program just needs 6 pages from the memory to get
loaded and executed. Only 6 VPN->PFN associations are needed here. That means
we need only 6 entries in the page table. Hence, other spaces to store 250
entries are a waste.

(4) To solve this issue of memory waste due to extra page table spaces, lets
keep only the required page frames in memory by breaking the whole page table
(of 1024 bytes) into multilple pages (of size 64 bytes), and keep all the them
at different places.

    PAGE_SIZE = 64 bytes
    SIZE_OF_PTE = 4 bytes

    Hence, One page will contain : 64/4 = 16 PTE's (as below).


    and total size of page table = 256 entries * 4 = 1024 bytes
    PAGE_SIZE = 64 bytes

    Hence, total pages (in whole page table) = 1024/64 = 16

                    |<------- 32-bits ---------------->|
                    |<-8 bits-><----- 24 bits -------->|

                    ___________________________________
                    |         |                        |
    PTE 0 - PTE 15  |         |                        | Page 0
     (64 bytes)     |         |                        |
         ---------------------------------------------------------
                    |         |                        |
    PTE 16 - PTE 31 |         |                        | Page 1
     (64 bytes)     |         |                        |
         ---------------------------------------------------------
                    |         |                        |
    PTE 32 - PTE 47 |         |                        | Page 2
     (64 bytes)     |         |                        |
         ---------------------------------------------------------
                    |         |        |               |
                    |         |        |               |
                    |         |        |               |
                    |         |        |               |
                    |         |        |               |
                    |         |        |               |
                    |         |       \|/              |
                    |         |                        |
                    |         |                        |
         ---------------------------------------------------------
                    |         |                        |
  PTE 240 - PTE 255 |         |                        | Page 15
     (64 bytes)     |         |                        |
                    ------------------------------------

Above, we have just logically divided the whole page table in 16 pages. But
these page table pages are still linear in nature. To keep all these at
different places (and create them only when required), we can create a
"Page directory" for page of this above page table.

(5) This page directory will have to hold the 16 entries because we have total
16 pages in the page table. Each entry will tell us, where is each page stored
in the RAM.

Since, we have 16 differnt entries in page table, we can take first 4 bits of
the generated virtual address and decide that where in this directory this
address belongs to.

For example, Below is a 14-bit address generated by compiler.

  |<------------ VPN ------------>|<----- Offset -------->|
  _________________________________________________________
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
  ---------------------------------------------------------
  |<------------->|<------------->|
   Page Directory      Index in
       Index             page

(6) Once we extract the 'Page Directory Index', from the VPN, we can use it to
find the address of the page from page directory, which has the actual VPN->PFN
translation.

     PDEAddr = PageDirBase + (PDIndex * sizeof(PDE));

(7) A Sample page directory looks like below,

           PFN   valid?
          ___________
       0  | 100 | 1 |
          -----------
       1  | -   | 0 |
          -----------
       2  | -   | 0 |
          -----------
       3  | -   | 0 |
          -----------
       4  | -   | 0 |
          -----------
       5  | -   | 0 |
          -----------
       6  | -   | 0 |
          -----------
       7  | -   | 0 |
          -----------
       8  | -   | 0 |
          -----------
       9  | -   | 0 |
          -----------
       10 | -   | 0 |
          -----------
       11 | -   | 0 |
          -----------
       12 | -   | 0 |
          -----------
       13 | -   | 0 |
          -----------
       14 | -   | 0 |
          -----------
       15 | 101 | 1 |
          -----------

The page directory says, where(in which page frame number of RAM) each
page of the page table is present.


For example, the above page directory says that, only 2 pages(0th page and 15th
page) of the page table exist in the RAM, at PFN 100 and 101.

Note : During translations, if the page directory entry is marked invalid, we
know that the access is invalid and raise an exception. If the PDE is valid,
we have some more work to do.

(8) In the above page table directory example, there are only 2 entries, because
compiled program needs only 2 pages to store all PTE's and these 2 pages are
stored at PFN 100 and 101.

Note : From the generated virtual address, the next 4 bits(Index in page) are
used to find the index in these pages to see where the actual program page is
present.

Below is again the same example for our reference. (A 14-bit address generated
by compiler).

Here, next 4 bits "Index in page" are used to find the index in the page of the
page table where the actual program's code/data/heap/stack is present.

  |<------------ VPN ------------>|<----- Offset -------->|
  _________________________________________________________
  |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
  ---------------------------------------------------------
  |<------------->|<------------->|
   Page Directory      Index in
       Index             page

Lets see how the pages at 100 and 101 looks like,


          Page at PFN : 100                     Page at PFN : 101
          -----------------                     -----------------

           PFN  valid?  prot                     PFN  valid?  prot
          __________________                    __________________
       0  | 10  | 1 |  r-x |                 0  |  -  | 0 |  -   |
          ------------------                    ------------------
       1  | 23  | 1 |  r-x |                 1  |  -  | 0 |  -   |
          ------------------                    ------------------
       2  | -   | 0 |  -   |                 2  | -   | 0 |  -   |
          ------------------                    ------------------
       3  | -   | 0 |  -   |                 3  | -   | 0 |  -   |
          ------------------                    ------------------
       4  | 89  | 1 | rw-  |                 4  | -   | 0 |  -   |
          ------------------                    ------------------
       5  | 59  | 0 | rw-  |                 5  | -   | 0 |  -   |
          ------------------                    ------------------
       6  | -   | 0 |  -   |                 6  | -   | 0 |  -   |
          ------------------                    ------------------
       7  | -   | 0 |  -   |                 7  | -   | 0 |  -   |
          ------------------                    ------------------
       8  | -   | 0 |  -   |                 8  | -   | 0 |  -   |
          ------------------                     ------------------
       9  | -   | 0 |  -   |                 9  | -   | 0 |  -   |
          ------------------                    ------------------
       10 | -   | 0 |  -   |                 10 | -   | 0 |  -   |
          ------------------                    ------------------
       11 | -   | 0 |  -   |                 11 | -   | 0 |  -   |
          ------------------                    ------------------
       12 | -   | 0 |  -   |                 12 | -   | 0 |  -   |
          ------------------                    ------------------
       13 | -   | 0 |  -   |                 13 | -   | 0 |  -   |
          ------------------                    ------------------
       14 | -   | 0 |  -   |                 14 | 55  | 1 |  rw- |
          ------------------                    ------------------
       15 | -   | 0 |  -   |                 15 | 45  | 1 |  rw- |
          ------------------                    ------------------

Page at PFN 100 contains related PFN's for code and heap data, and page at
PFN 101 contains related PFN's for stack data. (from the example in point 3).

(9) Once we find the final PFN, just replace the first 8 bits of the generated
virtual address with this PFN and we have the actual address with us.

In, the above example, instead of having all 16 linear pages of page table,
we are having only the required pages and we keep allocating the page and update
the entries in the "Page table directory". For example, if heap needs more
memory, OS can allocate one more page to it and make entries in the page table
directory.

The above saving of memory is very significant, and if we see the same in the
context of a 32-bit or 64-bit addressable RAM, the saving will be huge.

(10) Example:

Lets translate an address generated by compiler. Lets assume that compiler
generates an address as below:

                    0x3F80

The 14-bit address look like below:

  11 1111 1000 0000

Lets take first 4 bits : 1111 .

This means, 15th entry in the page directory, we need to refer.

The page directory above (point 7) tells us the related PFN is 101.

Now, lets take next 4 bits (1110) go to the PFN 101 and search for 14th(1110)
entry.

14th entry in the page at PFN 101 tells us to take the PFN 45.

We take this PFN and just replace the first 8 bits of the the actual VPN with
this PFN as below:

         00101101 000000

The address comes as : 0xB40
