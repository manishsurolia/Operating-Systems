The vDSO, or Virtual Dynamic Shared Object, is a shared library that the Linux
kernel automatically maps into the memory address space of every Linux user
application. It serves as a bridge for frequently used system calls by user-mode
applications. Given the time and resource costs associated with
context-switching between user-mode and kernel-mode, the frequent invocation of
system calls can significantly diminish the overall performance of the
application.

In summary, we can describe vDSO as a substitute for Linux syscalls.

To view the vDSO (Virtual Dynamic Shared Object) segment in a running program,
follow the instructions below,

[ ] cat hello_world.c
#include <stdio.h>
#include <unistd.h>

int main(void)
{
    printf("Hello world!! - pid : %d\n", getpid());
    while (1);
    return 0;
}

[ ] gcc hello_world.c -o hello_world

[ ] ./hello_world
Hello world!! - pid : 2299

Now, when the above 'hello_world' program in running, open another shell and
print all the memory mappings as below,

[ ] cat /proc/2299/maps
55a228a3c000-55a228a3d000 r--p 00000000 08:02 917999                     /home/manish/manish/OS/learn/VDSO/hello_world
55a228a3d000-55a228a3e000 r-xp 00001000 08:02 917999                     /home/manish/manish/OS/learn/VDSO/hello_world
55a228a3e000-55a228a3f000 r--p 00002000 08:02 917999                     /home/manish/manish/OS/learn/VDSO/hello_world
55a228a3f000-55a228a40000 r--p 00002000 08:02 917999                     /home/manish/manish/OS/learn/VDSO/hello_world
55a228a40000-55a228a41000 rw-p 00003000 08:02 917999                     /home/manish/manish/OS/learn/VDSO/hello_world
55a229b0a000-55a229b2b000 rw-p 00000000 00:00 0                          [heap]
7fcd94c00000-7fcd94c22000 r--p 00000000 08:02 5767552                    /usr/lib/x86_64-linux-gnu/libc.so.6
7fcd94c22000-7fcd94d9a000 r-xp 00022000 08:02 5767552                    /usr/lib/x86_64-linux-gnu/libc.so.6
7fcd94d9a000-7fcd94df2000 r--p 0019a000 08:02 5767552                    /usr/lib/x86_64-linux-gnu/libc.so.6
7fcd94df2000-7fcd94df6000 r--p 001f1000 08:02 5767552                    /usr/lib/x86_64-linux-gnu/libc.so.6
7fcd94df6000-7fcd94df8000 rw-p 001f5000 08:02 5767552                    /usr/lib/x86_64-linux-gnu/libc.so.6
7fcd94df8000-7fcd94e05000 rw-p 00000000 00:00 0
7fcd94e27000-7fcd94e2a000 rw-p 00000000 00:00 0
7fcd94e3e000-7fcd94e40000 rw-p 00000000 00:00 0
7fcd94e40000-7fcd94e41000 r--p 00000000 08:02 5767547                    /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
7fcd94e41000-7fcd94e69000 r-xp 00001000 08:02 5767547                    /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
7fcd94e69000-7fcd94e73000 r--p 00029000 08:02 5767547                    /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
7fcd94e73000-7fcd94e75000 r--p 00033000 08:02 5767547                    /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
7fcd94e75000-7fcd94e77000 rw-p 00035000 08:02 5767547                    /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
7ffd8384a000-7ffd8386b000 rw-p 00000000 00:00 0                          [stack]    ___
7ffd8398e000-7ffd83992000 r--p 00000000 00:00 0                          [vvar]        |<-------------- vDSO segments ('vvar'(data) and 'vdso'(code) segments)
7ffd83992000-7ffd83994000 r-xp 00000000 00:00 0                          [vdso]     ___|   ___
ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]          | <--- system calls code for application
                                                                                           ---
Below are 2 virtual semgents related to vDSO,

7ffd8398e000-7ffd83992000 r--p 00000000 00:00 0                          [vvar]
7ffd83992000-7ffd83994000 r-xp 00000000 00:00 0                          [vdso]

The data segment is 'vvar' which has size of 4 pages(1 page is 4096 bytes) and
holds all the data related to vdso functions.

The text segment is 'vdso' with size of 2 pages (1 page = 4096 bytes) and holds
all code related to vdso.

Also, the old regular vsyscall looks like below,

ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]

The code here is responsible to switch between user space to kernel space for
many system  calls.

Within the libc library, there are individual system call wrappers. Whenever a
system call occurs in a program, it initially verifies the existence of the
corresponding VDSO library function. If this function is found, the library call
invokes that VDSO library function instead of directly making the system call,
leading to significant time savings.

Next, we will see the difference between time taken by system call and the vdso
library call.

Write two programs as below. (One to directly do system call for 'time' and
another one is to call the 'vdso' library for 'time').

[ ] cat syscall.c
#include <stdio.h>
#include <sys/syscall.h>

int main(void)
{
    for (unsigned int i=0; i<10000000; i++) {
        syscall(SYS_time, NULL);
    }
    return 0;
}

[ ] cat vdso.c
#include <stdio.h>
#include <time.h>

int main(void)
{
    for (unsigned int i=0; i<10000000; i++) {
        time(NULL);
    }
    return 0;
}

Compile and run both the programs to see how much time each program spends in
kernel mode. We can use time utility to get that info.

[ ] gcc vdso.c -o vdso
[ ] gcc syscall.c -o syscall

[ ] time ./syscall

real    0m2.316s
user    0m1.258s
sys     0m1.056s

[ ]  time ./vdso

real    0m0.094s
user    0m0.093s
sys     0m0.001s

As you can observe that with non-system calls(vdso) our application spends very
very less time in 'sys' and also the whole execution time is very less. This
saves a lot of time as there is no swtich happening here to the kernel mode.

You can load both the programs in gdb to see how execution goes for each type
of the call.
