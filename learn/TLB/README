Paging makes a system slow because for each virtual memory translation, CPU need
to fetch the corresponding 'Physical frame number' stored in the process's page
table entry, which is stored in the RAM. For complete background of paging,
please see the last section about paging.

Translation Lookaside buffer (TLB):
--------------------------------

TLB is a part of Memory Management unit(MMU) hardware which works along with
paging to overcome the speed issue of paging. It is simply a hardware cache to
do faster virtual to physical address translations.

We can also call it 'address-translation cache'.

Upon each virtual memory reference, the hardware first checks the TLB to see if
then desired translation is present there or not. If present, the translation is
performed(quickly) without having to consult the page table. If not present,
virtual address is translated with the use of page table.

Below is an algorithm, which can represent the logic for TLB.
(Reference : https://pages.cs.wisc.edu/~remzi/OSTEP/vm-tlbs.pdf)

 VPN = (VirtualAddress & VPN_MASK) >> SHIFT
 (Success, TlbEntry) = TLB_Lookup(VPN)
 if (Success == True) // TLB Hit
    if (CanAccess(TlbEntry.ProtectBits) == True)
        Offset = VirtualAddress & OFFSET_MASK
        PhysAddr = (TlbEntry.PFN << SHIFT) | Offset
        Register = AccessMemory(PhysAddr)
    else
        RaiseException(PROTECTION_FAULT)
 else // TLB Miss
    PTEAddr = PTBR + (VPN * sizeof(PTE))
    PTE = AccessMemory(PTEAddr)
    if (PTE.Valid == False)
        RaiseException(SEGMENTATION_FAULT)
    else if (CanAccess(PTE.ProtectBits) == False)
        RaiseException(PROTECTION_FAULT)
    else
        TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits)
         RetryInstruction()

It is quite simple as below:
    1. Extract the virtual page number (VPN) from the virtual address.
    2. Check whether TLB holds translation for this VPN not.
    3. If translation is present for this VPN (TLB hit), fetch the
       'physical frame number' and construct corresponding physical address.
    4. If the CPU does not find the translation in the TLB (TLB miss), access
       process page table to find the traslation and update the TLB with this
       traslation information. This operation of checking page table is costly
       as there is an extra RAM memory access to find the
       'Physical Frame Number'. Discussed in paging section earlier.
    5. Once the TLB is updated, the hardware retries the instruction. This time,
       the translation is found in the TLB.

TLB Hit :
--------

When processor is able to find the traslation from virtual page number to a
physical frame number in TLB, It is called TLB hit.


TLB Miss :
--------

When processor does not find the physical frame number for a virtual page in
TLB, its a TLB miss.
After a TLB miss, it has to look into the process page table to find the
physical frame number.

Benefit of TLB:
--------------

TLB is a hardware cache, which sits very near to the processor and designed to
be very fast. Hence, if the virtual page to physical frame number is present in
TLB, it makes the address translation very fast at run time because in this case
processor does not have to do an extra access to the RAM address in page table
to get the physical frame number.

TLB-Miss handling:
------------------

A TLB miss can be handled by a hardware or by software.

Hardware handling: When a TLB miss occurs, hardware just need to know where is
the page table present (Generally, page table base register stores the address
of page table) and the format of the page table. On a TLB miss, it just fetches
the address of page table from 'page table base register', fetches the 'virtual
page number' from the virtual address being looked for and calculate the address
of page table entry. It gets physical frame number from this address and loads
in the TLB.

Software handling: On a TLB miss, hardware just raises an exception, which
pauses the current execution of process, raises the privilege level to kernel
mode and jumps to the trap handler. Trap handlers are written the OS. Now,
specific OS handler for this trap, will look into page table, find the
physical frame number, and update the TLB in the privileged mode of the kernel
and then return from the trap.
Important Note : This 'return from trap' is different than system calls. For
TLB-miss return from trap handler, with returning from a TLB miss handling trap,
the hardware must resume execution at the instruction that caused the trap (not
the next instruction).

Also, we should make sure that trap handler does not cause a TLB miss. For this
we can simply keep the trap handlers at some absolute addresses in the RAM,
which does not cause the address translations.

Most modern computers do software handling of TLB miss.

Size of a TLB:
--------------

A typical TLB can have 32, 64 or 128 entries and called fully associative.

For example, 32 entries in a TLB means there can be only 32 translations between
a VPN to PFN. Hardware should not have problem in storing 32 entries, but when
33rd entry comes it need to find which of the already existing entry to replace.

Also, a given VPN can be anywhere in the TLB and the hardware will search in TLB
in parallel fashion (accessing all entries at once and find the correct entry).

A TLB entry can be like this:

        VPN | PFN | Other bits

With the TLB lookup, hardware will get all the entries in parallel, finds which
entry has the VPN program is looking for, get the PFN for it, and return it.

Searching all entries in parallel, and looking for the exact entry, is much more
faster than sequential search.

'Other bits' hold the permissions related information for the physical frame
number.

Note : Since, a TLB has a very less entries (32/64/128 entries) compare to the
total page frame numbers, a VPN to PFN association can be stored at anywhere in
the TLB. Its not index wise.

Context Switch:
--------------

Each process has its own virtual page number.
For example, VPN 1 is there in process1 as well as in process2 also. But each of
these VPN 1 relates to different physical frame number in RAM.

This means, at a time, TLB contains the entries related to a specific process.

Due to above restriction, with every switch of process(context switch), TLB
needs to flush out the old process translation and start with the execution of
the new process.

A TLB looks something like below for a process:

        VPN      PFN     valid   prot
         1       100      1      rwx
         2       200      1       —
         3       300      1       —

Note : With each context switch TLB entries are flushed out. Hence, If OS does
context switching (switching between processes) more frequently, there will be
more TLB miss at the each resume of processes, as TLB has no entries in it.

To reduce this overhead, some systems add support to enable sharing of the TLB
across context switches. In particular, some hardware provide and 'address space
Identifier (ASID)' field in the TLB. We can think of the ASID as a process
identifier (PID), but usually it has fewer bits. (8 bits for the ASID versus
32 bits for a PID).

Below is a good TLB example of the same.

        VPN      PFN     valid   prot   ASID
         1       100      1      rwx     1
         2       200      1       —      1
         3       300      1       —      1
         1       400      1       —      2

See, here 2 process have entries together in TLB at a time. When there is TLB
lookup, hardware will search the entries specific to the ASID(associated with
the process ID).

When OS does context swtich between processes, it sets the TLB register with the
new ASID value, which is used for TLB lookup to find the corresponding PFN for
the new process.

Also, if 2 processes share a particular page, we will have TLB something as
below:

        VPN      PFN     valid   prot   ASID
         1       100      1      rwx     1
         2       200      1       —      1
         3       300      1       —      1
         1       200      1       —      2

Here, the second VPN of process-1 and the first VPN of process-2 are stored at
the same physical frame number in RAM.

It is very useful where libraries are shared between multiple processes. This
saves a lot of memory in RAM by re-utilizing the code.

Replacement Policy:
------------------

If the size of TLB is 32, means there can be only 32 translations exist at a
time between VPN's to PFN's. Hardware should not have problem in storing 32
entries, but when it need to store 33rd entry it need to find which of the
already existing entry to replace.

One such policy can be LRU, in which an entry which has been used least, can be
replaced.

Issue:
------

If the number of pages a program accesses in a short period of time, exceeds
the number of pages that fit into the TLB, the program will generate a large
number of TLB misses and will run slower.
