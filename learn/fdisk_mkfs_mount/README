Consider a new storage device (e.g., a flash drive). First, create a partition
on the device, and then mount the partition to a designated directory within
the root filesystem, such as /mnt/.

Note : Below steps were done in a fedora distribution. Thats why you will see 
zram and btrfs partitions during this excercise as currently default file system
with fedora is 'btrfs' (B-tree File system). It is a modern, copy-on-write (CoW)
file system for Linux designed to provide advanced features such as snapshots,
subvolumes, and integrated multi-device support to address the limitations of
traditional file systems. 

We will check the Btrfs and zram in some other notes.

Steps to create fresh partitions in a disk and mount it somewhere in root file
system. 

(1) lsblk - To see what all block devices we already have in our system.

[ ]  lsblk
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS
sda      8:0    0   10G  0 disk
├─sda1   8:1    0    1M  0 part
├─sda2   8:2    0    1G  0 part /boot
└─sda3   8:3    0    9G  0 part /home
                                /
zram0  251:0    0  7.7G  0 disk [SWAP]  

(2) Now insert your flash drive in a usb port.
(3) Execute 'lsblk' command again.

[ ] lsblk
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS
sda      8:0    0   10G  0 disk
├─sda1   8:1    0    1M  0 part
├─sda2   8:2    0    1G  0 part /boot
└─sda3   8:3    0    9G  0 part /home
                                /
sdb      8:16   1  7.2G  0 disk
zram0  251:0    0  7.7G  0 disk [SWAP]

(4) You can observe that you have got an extra block of memory named "sdb" after
inserting flash drive in usb port.

Note : This name 'sdb' is given by the kernel to the attached flash drive and
everytime we boot the system(or attach this flash drive), we may see a different
name for this. So be careful while using this name.

(5) Before continuing just make sure that this inserted flash drive is not
already mounted in our root file system, as below,

[ ] mount | grep sdb

Above should not show any output. This means, this disk is not mounted anywhere.
If mounted, unmont that first.

(6) Now run 'fdisk' command to 'sdb' block device to create a partition. We will
just create a single partition with this whole device.

[ ] sudo fdisk /dev/sdb
[sudo] password for manish:

Welcome to fdisk (util-linux 2.40.4).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.


Command (m for help): p <--- Check the current partitions in /dev/sdb
Disk /dev/sdb: 29.72 GiB, 31914983424 bytes, 62333952 sectors
Disk model: Mass-Storage
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x00000000

Device     Boot  Start      End  Sectors  Size Id Type
/dev/sdb1         2048   411647   409600  200M  c W95 FAT32 (LBA)
/dev/sdb2       411648 62333951 61922304 29.5G 83 Linux

Command (m for help): m <--- See all the available options

Help:

  DOS (MBR)
   a   toggle a bootable flag
   b   edit nested BSD disklabel
   c   toggle the dos compatibility flag

  Generic
   d   delete a partition
   F   list free unpartitioned space
   l   list known partition types
   n   add a new partition
   p   print the partition table
   t   change a partition type
   v   verify the partition table
   i   print information about a partition
   e   resize a partition

  Misc
   m   print this menu
   u   change display/entry units
   x   extra functionality (experts only)

  Script
   I   load disk layout from sfdisk script file
   O   dump disk layout to sfdisk script file

  Save & Exit
   w   write table to disk and exit
   q   quit without saving changes

  Create a new label
   g   create a new empty GPT partition table
   G   create a new empty SGI (IRIX) partition table
   o   create a new empty MBR (DOS) partition table
   s   create a new empty Sun partition table


Command (m for help): g <--- Create a GPT partition table. GPT is used mostly.
Created a new GPT disklabel (GUID: AC3F21F9-4DD3-489C-BC78-D2DF7C7552EC).
The device contains 'dos' signature and it will be removed by a write command. See fdisk(8) man page and --wipe option for more details.

Command (m for help): p <--- Check the partitions again in /dev/sdb

Disk /dev/sdb: 29.72 GiB, 31914983424 bytes, 62333952 sectors
Disk model: Mass-Storage
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: AC3F21F9-4DD3-489C-BC78-D2DF7C7552EC

Command (m for help): n <--- Create a new partition
Partition number (1-128, default 1): <--- We want to create only one partition
First sector (2048-62333918, default 2048): <--- Choose default
Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-62333918, default 62332927):

Created a new partition 1 of type 'Linux filesystem' and of size 29.7 GiB.
Partition #1 contains a vfat signature.

Do you want to remove the signature? [Y]es/[N]o: w
Do you want to remove the signature? [Y]es/[N]o: Y

The signature will be removed by a write command.

Command (m for help): w <--- Write all the configs we have done so far in disk.
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.

(7) We can not use this newly created partition until we have a file system in
this partition. Let's create a file system in it.

[ ] sudo mkfs.ext4 /dev/sdb1
[sudo] password for manish:
mke2fs 1.47.2 (1-Jan-2025)
Creating filesystem with 7791360 4k blocks and 1949696 inodes
Filesystem UUID: 2fa34333-38b3-41eb-a00e-58d74e97d0c3
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000

Allocating group tables: done
Writing inode tables: done
Creating journal (32768 blocks):
done
Writing superblocks and filesystem accounting information: done

(8) Now, as we have sucessfully created ext4 filesystem in /dev/sdb4, we need
to mount it somewhere in the root file system to be able to use it.

[ ] sudo mkdir /mnt/new_disk
[ ] sudo mount /dev/sdb1 /mnt/new_disk/
[ ] cd /mnt/new_disk/
[ ] df -kh .
Filesystem      Size  Used Avail Use% Mounted on
/dev/sdb1        30G  2.1M   28G   1% /mnt/new_disk
[ ] ls -lart
total 20
drwx------  2 root root 16384 Sep 20 16:25 lost+found
drwxr-xr-x  3 root root  4096 Sep 20 16:25 .
drwxr-xr-x. 1 root root    16 Sep 20 16:29 ..

(9) Once done working on this, we can umount it and remove the flash drive.

[ ] sudo umount /mnt/new_disk
[ ] cd /mnt/new_disk/
[ ] df -kh .
Filesystem      Size  Used Avail Use% Mounted on
/dev/sda3       9.0G  6.4G  2.3G  74% /

You can see that now again the folder /mnt/new_disk is pointing back to the old
mount point (the mount done for rootfs). You can remove the flash drive now.
