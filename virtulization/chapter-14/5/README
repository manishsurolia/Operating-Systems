

valgrind clearly show write on a wrong memory as below:

==13759== Invalid write of size 4
==13759==    at 0x10917C: main (in /home/manish/Documents/OS/virtulization/chapter-14/5/out_of_boundary)
==13759==  Address 0x4a501d0 is 0 bytes after a block of size 400 alloc'd
==13759==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==13759==    by 0x10916D: main (in /home/manish/Documents/OS/virtulization/chapter-14/5/out_of_boundary)




[ ]  gcc out_of_boundary.c -o out_of_boundary
[ ]  ./out_of_boundary 
[ ]  valgrind ./out_of_boundary 
==13759== Memcheck, a memory error detector
==13759== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==13759== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==13759== Command: ./out_of_boundary
==13759== 
==13759== Invalid write of size 4
==13759==    at 0x10917C: main (in /home/manish/Documents/OS/virtulization/chapter-14/5/out_of_boundary)
==13759==  Address 0x4a501d0 is 0 bytes after a block of size 400 alloc'd
==13759==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==13759==    by 0x10916D: main (in /home/manish/Documents/OS/virtulization/chapter-14/5/out_of_boundary)
==13759== 
==13759== 
==13759== HEAP SUMMARY:
==13759==     in use at exit: 400 bytes in 1 blocks
==13759==   total heap usage: 1 allocs, 0 frees, 400 bytes allocated
==13759== 
==13759== LEAK SUMMARY:
==13759==    definitely lost: 400 bytes in 1 blocks
==13759==    indirectly lost: 0 bytes in 0 blocks
==13759==      possibly lost: 0 bytes in 0 blocks
==13759==    still reachable: 0 bytes in 0 blocks
==13759==         suppressed: 0 bytes in 0 blocks
==13759== Rerun with --leak-check=full to see details of leaked memory
==13759== 
==13759== For lists of detected and suppressed errors, rerun with: -s
==13759== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

